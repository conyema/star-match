{"version":3,"sources":["utils.js","NumKey.js","StarsDisplay.js","Replay.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","colors","available","used","wrong","candidate","NumKey","props","className","style","backgroundColor","status","onClick","number","StarDisplay","count","map","starId","Replay","color","gameStatus","Game","useState","stars","setStars","candidateNums","setCandidateNums","availableNums","setAvailableNums","timeLeft","setTimeLeft","useEffect","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","newAvailableNums","filter","n","includes","useGameState","candidatesAreWrong","numberStatus","onNumberClick","currStatus","cn","startNewGame","StarsDisplay","App","gameId","setGameId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc9c7a41.chunk.js","sourcesContent":["// Math science\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\n\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n    return sums[utils.random(0, sums.length - 1)];\n  },\n};\n\nexport default utils;","// Color Theme\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'red',\n  candidate: 'deepskyblue',\n};\n\nconst NumKey = (props) => \n  <button \n    className=\"number\"\n    style={{ backgroundColor: colors[props.status] }} \n    onClick={()=> props.onClick(props.number, props.status)}\n  > \n    {props.number} \n  </button>\n\n\nexport default NumKey;\n\n/* to identify a good candidate for a comp:\n  - items that share similar behaviour or data\n  - Closure makes the onClick function properly/independently work for each button\n  - make numkey re-usable and define some shared behaviour\n  - make comp smaller and app more readable like starDisplay comp\n  - \n\n\n\n*/","import utils from './utils';\n\nconst StarDisplay = (props) => {\n  return (\n    <>\n      {utils.range(1, props.count).map(starId =>\n        <div key={starId} className=\"star\" />\n      )}\n    </>\n  )\n};\n\nexport default StarDisplay;\n\n// Fragment used to avoid using new html elem","const Replay = (props) => {\n  \n  return (\n    <div className='game-done'>\n      <div \n        className='message'\n        style={{ color: props.gameStatus === 'won' ? 'green' : 'red' }}\n      >\n        {props.gameStatus === 'won' ? 'You Won' : 'Game Over'}\n      </div>\n      <button onClick={props.onClick} >Replay</button>\n    </div>\n  );\n};\n\nexport default Replay;","// import logo from './logo.svg';\nimport { useEffect, useState } from 'react';\nimport utils from './utils';\nimport NumKey from './NumKey';\nimport StarsDisplay from './StarsDisplay';\nimport Replay from './Replay'\n\n/* custom hook that: \n  - initialize state\n  - initialize side effects\n  - gives pre-defined behaviours to transact on the state\n  NB: - ALWAYS use hooks in the right order; do NOT call hooks inside loop\n        or conditions (Rule #1)\n      - Name hooks with [use]; it helps linters\n*/\nconst useGameState = () => {\n    /* make star-count a state element; we want react to reflect its changes in UI */\n  \n  // const stars = utils.random(1, 9);\n  const [stars, setStars] = useState(utils.random(1, 9));\n  const [candidateNums, setCandidateNums] = useState([]);\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\n  const [timeLeft, setTimeLeft] = useState(10);\n\n  /* setInterval or setTimeout(more interesting)\n   useEffect is a way to introduce side effect for the Game comp\n   takes a function it runs whenever the owner comp renders itself\n   always remember to clean a side effect introduced when its no longer needed\n   done in the return value of the side-effect function: return a func that\n   will be called when React is about to unmount or re-render the comp */\n  \n  useEffect(() => {\n    // console.log('done rendering..');\n    if (timeLeft > 0 && availableNums.length > 0) {\n      const timerId = setTimeout(() => {\n        setTimeLeft(timeLeft - 1);\n      }, 1000);\n\n      return () => clearTimeout(timerId);\n    }\n    // return () => {console.log('Game is changing: comp re-rendering');}\n  });\n\n  const setGameState = (newCandidateNums) => {\n    // update the game to mark num as candidate\n    if (utils.sum(newCandidateNums) !== stars) {\n      setCandidateNums(newCandidateNums);\n    } else {\n      /* update the game to mark num as 'used'/candidate\n      - get new avail. nums and set it\n      - and reset game state\n      */\n      const newAvailableNums = availableNums.filter(\n        n => !newCandidateNums.includes(n)\n      );\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  };\n\n  return {stars, candidateNums, availableNums, timeLeft, setGameState};\n};\n\nconst Game = (props) => {\n  const {\n    stars, \n    candidateNums, \n    availableNums, \n    timeLeft, \n    setGameState\n  } = useGameState();\n\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  // const gameIsWon = availableNums.length === 0;\n  // const gameIsLost = timeLeft === 0;\n  const gameStatus = availableNums.length === 0 \n    ? 'won'\n    : timeLeft === 0 ? 'lost' \n    : 'active';\n\n  /* function to compute the status to be sent as booleans instead\n    of passing unnecesary values(like av, cand nums ) that aren't used in rendering */\n\n  const numberStatus = (number) => {\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong': 'candidate';\n    }\n    return 'available';\n  };\n\n  const onNumberClick = (number, currStatus) => {\n    // console.log('numKey:', number, 'Status:', currStatus);\n    \n    // do nothing if its a used number\n    if (gameStatus !== 'active' || currStatus === 'used') {\n      return;\n    }\n    // else add num as new candidate if 'avialable' or otherwise\n    const newCandidateNums = \n      currStatus === 'available' \n      ? candidateNums.concat(number)\n      : candidateNums.filter(cn => cn !== number);\n      \n    setGameState(newCandidateNums);\n  };\n\n\n  return (\n    <div className=\"game\">\n      <div className=\"help\">\n        Pick 1 or more numbers that sum to the number of stars\n        </div>\n      <div className=\"body\">\n        <div className=\"left\">\n          {gameStatus !== 'active' ?\n           (\n             < Replay onClick={props.startNewGame} gameStatus={gameStatus} />\n           ) : (\n              <StarsDisplay count={stars} />\n            )}\n        </div>\n        <div className=\"right\">\n          {utils.range(1, 9).map(number => \n            <NumKey \n              key={number} \n              status={numberStatus(number)} \n              number={number} \n              onClick={onNumberClick}\n            />\n          )} \n        </div>\n      </div>\n      <div className=\"timer\">Time Remaining: {timeLeft} Secs</div>\n    </div>\n  );\n};\n\nexport default Game;\n\n\n/*\n- 2 logic to consider in react for every 'behaviour'\n - Game logic to change state; logic for the 'behaviour'\n - UI logic to describe state; what the 'behaviour' is going to change\n- to design UI logic u need to come up with what element\n  needs to be on the state\n- minimize the state in a stteful component; don't put stuff that\n  can be computed/derived from other state\n*/\n\n/* React structure\n  - Hooks into states and any side effects\n  - computations based on the state : core Game logic\n  - then the return statement\n*/\n\n/*  Resetting game \n  1 - reset game state to initial/default values :- enough for\n      most cases. But when comp have side effects(eg. subscribing to data, starting a timer etc)\n      things can get complicated as u have to reset  side effects.\n  \n  2(better) - unmount the component from the DOM and remount it\n*/\n","// import logo from './logo.svg';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport Game from './Game';\n\nconst App = () => {\n  const [gameId, setGameId] = useState(1);\n\n  return (\n    <Game key={gameId} startNewGame={() => setGameId(gameId + 1)} />\n  );\n};\n\nexport default App;\n\n\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}